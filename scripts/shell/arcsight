#!/bin/sh

# Remember where we were called from. 
if [ -z "$USER_DIR" ]; then
  USER_DIR=`pwd -P`
  export USER_DIR
fi

# Set the ARCSIGHT_HOME.
ARCSIGHT_HOME=`dirname $0`/..

# Little trick to resolve to absolute path.
cd $ARCSIGHT_HOME
ARCSIGHT_HOME=`pwd -P`
export ARCSIGHT_HOME

# Check if we got the quiet flag.
if [ "$1" = "-quiet" ]; then
    ARCSIGHT_QUIET=true
    export ARCSIGHT_QUIET
    shift
fi

# Check if the -exitonerror flag is given.  This can be ignored.
if [ "$1" = "-exitonerror" ]; then
    shift
fi

# Are we supposed to move to a different Arcsight home? (i.e. have we been upgraded?)
if [ -f $ARCSIGHT_HOME/bin/movetocurrentarcsighthome.sh ]; then

    # Ok, go to the specified arcsight home
    . $ARCSIGHT_HOME/bin/movetocurrentarcsighthome.sh

fi

# Feedback on currently assumed environment.
if [ -z "$ARCSIGHT_QUIET" ]; then
  echo
  echo Assuming ARCSIGHT_HOME: $ARCSIGHT_HOME
fi

# Check if the ARCSIGHT_HOME is valid.
if [ ! -f $ARCSIGHT_HOME/bin/arcsight ]; then 
    
    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------
    echo ERROR - There is no ArcSight installation at the assumed location
    echo ERROR - of the ARCSIGHT_HOME. Please check your installation
    echo ERROR - and/or environment settings.
    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------
    echo
    exit
fi

# Set the JAVA_HOME. If the DEV switch is on, accept the JAVA_HOME
# setting from the environment. If not, hardcode the JAVA_HOME to
# ARCSIGHT_HOME/jre

# Check for the ARCSIGHT_DEV switch.
if [ -z "$ARCSIGHT_DEV" ]; then
    
    # No ARCSIGHT_DEV switch, so hardcode the JAVA_HOME.
    JAVA_HOME=$ARCSIGHT_HOME/jre
    export JAVA_HOME
fi

if [ "$1" = "-cpuusage" ]; then

    # If this switch is set, then set arcsight debug and
    # and shift out that parameter.
    export ARCSIGHT_CPU_USAGE_CLASS="com.arcsight.util.CPUUsageMonitorUtility"

    # Let the user know that debugging is enabled.
    echo Enabling CPU usage tracking

    shift
fi

# If remote debugging is already turned on, for example because another
# arcsight command is being called from within a process that has been
# started using this script, and a remote debugging option was enabled there,
# then we can't enable it again, because there's going to be a port clash,
# which will cause the called Java program to fail. 
if [ "$1" = "-remote_socket" ]; then
    if [ -z "$ARCSIGHT_REMOTE_DEBUG" ]; then
        # If this switch is set, then set arcsight debug and
        # and shift out that parameter.
        export ARCSIGHT_REMOTE_DEBUG="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=2048,suspend=n"
        # Let the user know that debugging is enabled.
        echo Enabling remote debugging -- using socket for communication
    fi
    shift
fi

if [ "$1" = "-remote_socket2" ]; then
    if [ -z "$ARCSIGHT_REMOTE_DEBUG" ]; then
        # If this switch is set, then set arcsight debug and
        # and shift out that parameter.
        export ARCSIGHT_REMOTE_DEBUG="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=4096,suspend=n"
        # Let the user know that debugging is enabled.
        echo Enabling remote debugging -- using socket for communication
    fi
    shift
fi

if [ "$1" = "-yourkit" ]; then
    if [ -z "$ARCSIGHT_REMOTE_DEBUG" ]; then
        # If this switch is set, then set arcsight debug and
        # and shift out that parameter.
        export ARCSIGHT_REMOTE_DEBUG=-Xrunyjpagent:port=10000
        # Let the user know that debugging is enabled.
        echo "Enabling YourKit (on port 10000)"
    fi
    shift
fi

# Feedback on currently assumed environment.
if [ -z "$ARCSIGHT_QUIET" ]; then 
    echo Assuming JAVA_HOME: $JAVA_HOME
    echo
fi

# Check if the JAVA_HOME is valid.
if [ ! -f "$JAVA_HOME/bin/java" ]; then 

    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------
    echo ERROR - There does not appear to be a valid Java installation at 
    echo ERROR - the assumed location of the JAVA_HOME. Please check your 
    echo ERROR - installation and/or environment settings.
    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------
    echo
    exit
fi

if [ "$1" = "-ibmheapdump" ]; then

    # Set the parameters needed for dumping the heap 
    # dump of the JVM upon a -QUIT signal.
    IBM_HEAPDUMP=true
    IBM_HEAPDUMP_OUTOFMEMORY=true
    IBM_HEAPDUMPDIR=$ARCSIGHT_HOME

    # Export the paramters.
    export IBM_HEAPDUMP
    export IBM_HEAPDUMP_OUTOFMEMORY
    export IBM_HEAPDUMPDIR

    # Let the user know that the VM has been configured to dump
    # the memory heap.
    echo "Parameters Have Been Set for Dumping the VM Memory Heap"
    echo

    shift
fi

# Set the path to include the JAVA_HOME/bin, nss libs and tools
# Get the OS name.
OS=`uname`

case "$OS" in
      SunOS)
                # Running on Solaris.
		PATH=${JAVA_HOME}/bin:${ARCSIGHT_HOME}/bin/nss/solaris:${PATH}
		export PATH
		# Add libgcc_s.so.1 path
        if [ -f /usr/sfw/lib/libgcc_s.so.1 ]; then
            LD_LIBRARY_PATH=${ARCSIGHT_HOME}/bin/nss/solaris:/usr/sfw/lib:${LD_LIBRARY_PATH}
        else
            LD_LIBRARY_PATH=${ARCSIGHT_HOME}/bin/nss/solaris:/usr/local/lib:${LD_LIBRARY_PATH}
        fi
		export LD_LIBRARY_PATH
                ;;

      Linux)
                # Running on Linux.
            IS_64BIT_JRE=`$JAVA_HOME/bin/java -version 2>&1 | grep "64-Bit"`
            if [ "$IS_64BIT_JRE" = "" ]; then
		PATH=${JAVA_HOME}/bin:${ARCSIGHT_HOME}/bin/nss/linux:${PATH}
		export PATH
		LD_LIBRARY_PATH=${ARCSIGHT_HOME}/bin/nss/linux:${LD_LIBRARY_PATH}
		export LD_LIBRARY_PATH
            else
		PATH=${JAVA_HOME}/bin:${ARCSIGHT_HOME}/bin/nss/linux64:${PATH}
		export PATH
		LD_LIBRARY_PATH=${ARCSIGHT_HOME}/bin/nss/linux64:${LD_LIBRARY_PATH}
		export LD_LIBRARY_PATH
            fi
            
            # If on Arcsight Express, set locale if locale is set in .bash_profile
            if [ -f /home/arcsight/.bash_profile ]; then
            	lang=`grep LANG /home/arcsight/.bash_profile | cut -d'=' -f2`
            	if [ -n "$lang" ]; then
            		export LANG=$lang
            	fi
            fi
            ;;

      AIX)
		#Running on AIX
	        PATH=${JAVA_HOME}/bin:${PATH}
                export PATH
                ;;
esac


# Parse JVM flags
JVMFLAGS=
# Ugly cuts, because Solaris default sh is bourne shell, which doesn't
# support substring operation (e.g. ${1:0:3})
while [ "`echo $1|cut -c -3`" = "-J-" ]; do
   JVMFLAGS="$JVMFLAGS `echo $1|cut -c 3-`"
   shift
done

if [ "$JVMFLAGS" != "" ]; then
  # This currently only works without wrapper
  export ARCSIGHT_JVM_OPTIONS="$JVMFLAGS $ARCSIGHT_JVM_OPTIONS"
fi

# Check if specified component exists.
if [ ! -f $ARCSIGHT_HOME/bin/scripts/$1.sh ]; then

    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------
    echo ERROR - No component or wrong component specified!
    echo ERROR - Usage: arcsight component [component-options]
    echo ERROR - In order to start a component of the ArcSight product, 
    echo ERROR - give the name of the component as the first argument to
    echo ERROR - the arcsight script. 
    echo ERROR - Example: use "$ arcsight manager"
    echo ERROR - to start the ArcSight Manager component.
    echo ERROR ------------------------------------------------------------
    echo ERROR ------------------------------------------------------------    
    echo
    exit
fi

# Invoke the specified script
COMMAND=$1
shift
. $ARCSIGHT_HOME/bin/scripts/$COMMAND.sh "$@"
